/*
 * This file is generated by jOOQ.
 */
package com.zaytsevp.pethousesjooq.model.tables;


import com.zaytsevp.pethousesjooq.model.Indexes;
import com.zaytsevp.pethousesjooq.model.Keys;
import com.zaytsevp.pethousesjooq.model.Public;
import com.zaytsevp.pethousesjooq.model.tables.records.HouseKeeperRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HouseKeeper extends TableImpl<HouseKeeperRecord> {

    private static final long serialVersionUID = 1925350739;

    /**
     * The reference instance of <code>public.house_keeper</code>
     */
    public static final HouseKeeper HOUSE_KEEPER = new HouseKeeper();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseKeeperRecord> getRecordType() {
        return HouseKeeperRecord.class;
    }

    /**
     * The column <code>public.house_keeper.id</code>.
     */
    public final TableField<HouseKeeperRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.house_keeper.first_name</code>.
     */
    public final TableField<HouseKeeperRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.house_keeper.last_name</code>.
     */
    public final TableField<HouseKeeperRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.house_keeper.age</code>.
     */
    public final TableField<HouseKeeperRecord, Integer> AGE = createField(DSL.name("age"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.house_keeper.level</code>.
     */
    public final TableField<HouseKeeperRecord, Integer> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.house_keeper.status</code>.
     */
    public final TableField<HouseKeeperRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTIVE'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.house_keeper</code> table reference
     */
    public HouseKeeper() {
        this(DSL.name("house_keeper"), null);
    }

    /**
     * Create an aliased <code>public.house_keeper</code> table reference
     */
    public HouseKeeper(String alias) {
        this(DSL.name(alias), HOUSE_KEEPER);
    }

    /**
     * Create an aliased <code>public.house_keeper</code> table reference
     */
    public HouseKeeper(Name alias) {
        this(alias, HOUSE_KEEPER);
    }

    private HouseKeeper(Name alias, Table<HouseKeeperRecord> aliased) {
        this(alias, aliased, null);
    }

    private HouseKeeper(Name alias, Table<HouseKeeperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HouseKeeper(Table<O> child, ForeignKey<O, HouseKeeperRecord> key) {
        super(child, key, HOUSE_KEEPER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HOUSE_KEEPER_PKEY);
    }

    @Override
    public UniqueKey<HouseKeeperRecord> getPrimaryKey() {
        return Keys.HOUSE_KEEPER_PKEY;
    }

    @Override
    public List<UniqueKey<HouseKeeperRecord>> getKeys() {
        return Arrays.<UniqueKey<HouseKeeperRecord>>asList(Keys.HOUSE_KEEPER_PKEY);
    }

    @Override
    public HouseKeeper as(String alias) {
        return new HouseKeeper(DSL.name(alias), this);
    }

    @Override
    public HouseKeeper as(Name alias) {
        return new HouseKeeper(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HouseKeeper rename(String name) {
        return new HouseKeeper(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HouseKeeper rename(Name name) {
        return new HouseKeeper(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
